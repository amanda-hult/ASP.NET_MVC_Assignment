@using System.Text.Json
@model ProjectViewModel
@{
	Layout = "_PortalLayout";
	ViewData["Title"] = Model.Title;

	var jsonOptions = new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };
	var preselectedJson = JsonSerializer.Serialize(Model.PreselectedMembers, jsonOptions);
}

<script> 
	window.preselectedMembersJson = @Html.Raw(preselectedJson)
 </script>


@await Html.PartialAsync("Partials/Components/Modals/_AddProjectModal", Model.AddProjectModel)
@await Html.PartialAsync("Partials/Components/Modals/_EditProjectModal", Model.EditProjectModel)
@await Html.PartialAsync("Partials/Components/Modals/_AddMemberToProjectModal", Model.AddMemberToProjectModel)
@await Html.PartialAsync("Partials/Components/Modals/_DeleteProjectModal")


<section id="projects">
	<header class="portal-header">
		<h2>Projects</h2>
		<button type="button" data-modal="true" data-target="#addProjectModal" class="button btn-blue btn-add">Add Project</button>
	</header>

	<div class="project-statuses">
		<p data-filter="all" class="project-status">ALL [@Model.Projects.Count()] </p>
		<p data-filter="started" class="project-status">STARTED [@Model.Projects.Where(x => x.Status.StatusName == "Started").Count()]</p>
		<p data-filter="not started" class="project-status">NOT STARTED [@Model.Projects.Where(x => x.Status.StatusName == "Not started").Count()]</p>
		<p data-filter="completed" class="project-status">COMPLETED [@Model.Projects.Where(x => x.Status.StatusName == "Completed").Count()]</p>
	</div>

	<div class="project-wrapper">

		@foreach (var project in Model.Projects) 
		{
			@await Html.PartialAsync("Partials/Components/Cards/_ProjectCard", project)
		 }

	</div>

</section>






<script>
    document.addEventListener('DOMContentLoaded', () => {

        //FOR ADD FORM
        initTagSelector({
            containerId: 'tagged-users-add',
            inputId: 'user-search-add',
            resultsId: 'user-search-results-add',
            searchUrl: (query) => '@Url.Action("SearchMember", "Member")' + '?term=' + encodeURIComponent(query),
            displayProperty: 'fullName',
            imageProperty: 'userImageUrl',
            tagClass: 'user-tag',
            emptyMessage: 'No members found.',
            preselected: [],
            selectedInputIds: 'SelectedMemberIdsAdd'
        })



        //FOR EDIT FORM
        const editBtns = document.querySelectorAll('[data-target="#editProjectModal"]')
        const editProjectModal = document.getElementById('editProjectModal')


        editBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const target = e.currentTarget

                const editProjectIdElement = editProjectModal.querySelector('[name="Id"]')
                editProjectIdElement.value = target.dataset.id || ''

                // const editProjectId = editProjectIdElement.value

                const projectId = btn.dataset.id
                var preSelectedMembers = window.preselectedMembersJson?.[projectId]


                initTagSelector({
                    containerId: 'tagged-users-edit',
                    inputId: 'user-search-edit',
                    resultsId: 'user-search-results-edit',
                    searchUrl: (query) => '@Url.Action("SearchMember", "Member")' + '?term=' + encodeURIComponent(query),
                    displayProperty: 'fullName',
                    imageProperty: 'userImageUrl',
                    tagClass: 'user-tag',
                    emptyMessage: 'No members found.',
                    preselected: preSelectedMembers,
                    selectedInputIds: 'SelectedMemberIdsEdit'
                })


                const editProjectImagePreviewContainer = editProjectModal.querySelector('.image-preview-container')
                const editProjectImagePreview = editProjectModal.querySelector('#image-preview-edit-project-modal')

                // const editProjectImage = editProjectModal.querySelector('[name="ProjectImage"]')
                const editProjectName = editProjectModal.querySelector('[name="ProjectName"]')

                // const editProjectDescription = editProjectModal.querySelector('.wysiwyg-editor')
                
                const editProjectStartDate = editProjectModal.querySelector('[name="StartDate"]')
                const editProjectEndDate = editProjectModal.querySelector('[name="EndDate"]')
                const editProjectBudget = editProjectModal.querySelector('[name="Budget"]')
                const editProjectClient = editProjectModal.querySelector('[name="SelectedClientId"]')
                const editProjectStatus = editProjectModal.querySelector('[name="SelectedStatusId"]')

                editProjectImagePreview.classList.remove('d-none')
                editProjectImagePreviewContainer.classList.add('selected')

                editProjectImagePreview.src = btn.dataset.image || ''
                editProjectName.value = target.dataset.name || ''

                window.editProjectDescriptionQuill.root.innerHTML = target.dataset.description || ''
                // editProjectDescription.value = target.dataset.description || ''
                
                editProjectStartDate.value = target.dataset.startdate || ''
                editProjectEndDate.value = target.dataset.enddate || ''
                editProjectBudget.value = target.dataset.budget || ''
                editProjectClient.value = target.dataset.clientid || ''
                editProjectStatus.value = target.dataset.statusid || ''
            })

        })


        // ADD MEMBER TO PROJECT FORM
        const addMembersBtns = document.querySelectorAll('[data-target="#addMemberToProjectModal"]')
        const addMemberToProjectModal = document.getElementById('addMemberToProjectModal')

        addMembersBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const target = e.currentTarget

                const addMemberToProjectIdElement = addMemberToProjectModal.querySelector('[name="Id"]')
                addMemberToProjectIdElement.value = target.dataset.id || ''

                const projectId = btn.dataset.id

                var preSelectedMembers = window.preselectedMembersJson?.[projectId]

                initTagSelector({
                   containerId: 'tagged-users-edit-members',
                   inputId: 'user-search-edit-members',
                   resultsId: 'user-search-results-edit-members',
                   searchUrl: (query) => '@Url.Action("SearchMember", "Member")' + '?term=' + encodeURIComponent(query),
                   displayProperty: 'fullName',
                   imageProperty: 'userImageUrl',
                   tagClass: 'user-tag',
                   emptyMessage: 'No members found.',
                   preselected: preSelectedMembers,
                   selectedInputIds: 'SelectedMemberIdsUpdateMembers'
                })

            })

        })



        const deleteBtns = document.querySelectorAll('[data-target="#deleteProjectModal"]')
        const deleteProjectId = document.getElementById('delete-project-id')
        const deleteProjectName = document.getElementById('delete-project-name')

        deleteBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                deleteProjectId.value = btn.dataset.id || ''
                deleteProjectName.textContent = btn.dataset.name

                const errorMessageContainer = document.getElementById('error-message')
                if (errorMessageContainer) {
                    errorMessageContainer.textContent = ''
                    errorMessageContainer.style.display = 'none'
                }
            })
        })



        const statuses = document.querySelectorAll('[data-filter]')
        const cards = document.querySelectorAll('.project-card')

        statuses.forEach(status => {
            status.addEventListener('click', () => {
                const selectedStatus = status.dataset.filter

                statuses.forEach(s => {
                    if (s === status) {
                        s.classList.add('focused')
                    } else {
                        s.classList.remove('focused')
                    }
                })

                cards.forEach(card => {
                    const projectStatus = card.dataset.status

                     if (selectedStatus === "all" || projectStatus === selectedStatus) {
                         card.style.display = 'grid'
                     } else {
                         card.style.display = 'none'
                     }
                })
            })
        })

    })

</script>



